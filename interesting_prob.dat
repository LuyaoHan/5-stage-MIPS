
        1 * 8 + 1 = 9 
       12 * 8 + 2 = 98
      123 * 8 + 3 = 987
     1234 * 8 + 4 = 9876
    12345 * 8 + 5 = 98765
   123456 * 8 + 6 = 987654
  1234567 * 8 + 7 = 9876543
 12345678 * 8 + 8 = 98765432
123456789 * 8 + 9 = 987654321

note that 12 = 1 * 10 + 2;
         123 = 12 * 10 + 3...
        1234 = 123 * 10 + 4...
       12345 = 1234 * 10 + 5...
      123456 = 12345 * 10 + 6...

/*
Below is orignal way to initialize constants, we use LW instead.
PC = 0
ADDI   $9    $0    1
001000 00000 01001 0000000000000001
20090001

PC = 4
ADDI   $8    $0    1
001000 00000 01000 0000000000000001
20080001

PC = 8
ADDI   $13   $0    1
001000 00000 01101 0000000000000001
200D0001

PC = C
ADDI   $12   $0    10 
001000 00000 01100 0000000000001010
200C000A

PC = 10
ADDIU  $10   $9    7
001001 01001 01010 0000000000000111
252A0007 


PC = 14
ADDI   $11   $0    10
001000 00000 01011 0000000000001010
200B000A

PC = 18
lw     $17    $9    (0)
100011 01001 10001  00000000 00000000
0x8D310000
$17 = 110
*/

PC = 0
addi   $21   $9     (0)
001000 01001 10101 00000000 00000000
0x21350000
$21 = 0;

PC = 4
lw     $9    $21    0
100011 10101 01001 00000000 00000000
0x8EA90000
$9 = mem[$21+0] = mem[0]= 1

PC = 8
lw   	$8    $21    1
0x8EA80001
100011 10101 01000 0000000000000001


PC = C
lw     $13   $21    2
0x8EAD0002
100011 10101 01101 0000000000000002


PC = 10
lw     $12   $21    3
0x8EAC0003
100011 10101 01100 0000000000000003


PC = 14
//lw     $10   $21    4
//0x8EAA0004
//100011 10101 01010 0000000000000004
addi   $10   $0     (8)
001000 00000 01010 00000000 00001000



PC = 18
//lw     $11   $21    5
//0x8EAB0005
//100011 10101 01011 0000000000000005
addi   $11   $0     (5)
001000 00000 01011 00000000 00000101






Result:
$9 = 1
$8 = 1
$13 = 1
$12 = 10
$10 = 8
$11 = 5




(//001101 00000 00100 0000000001010000
//ori $4 $zero 80 (0x50)           //define LW address
//0x34040050
//$4 = 80)

PC = 1C
001000 00000 00100 ?0000000100000000
addi $4 $zero 256           //define LW address
20040100?
$4 = 80

PC = 20
nop:
001000 00000 00000 00000000 0000000



PC = 24
//time 8  
000000 01010 01000 0000000000 011000 
mult   $8     $10
RsD[25:21] = 10;
RtD[20:16] = 8;
0x01480018
loop1: 1*8 = 8
loop2: 12 * 8 = 96 
loop3: 123 * 8 = 984 
loop4: 1234 * 8 = 9872 
loop5: 12345 * 8 = 98760  


PC = 28
000000 00000 00000 1000000000 010010
MFLO $16
0x00008012
loop1: $16 = 8
loop2: $16 = 96 
loop3: $16 = 984 
loop4: $16 = 9872 
loop5: $16 = 98760  




PC = 2C
//times 10 
000000 01000 01100 0000000000 011000
MULT   $8    $12
0x010C0018
loop1: 1*10

PC = 30
000000 00000 00000 01000 00000 010010
MFLO $8
0x00004012
loop1: $8 = 10




PC = 34
//+1, +2, +3, +4, +5..... 
$16 = $16 + $9
ADD rd, rs, rt add [rd] = [rs] + [rt]    //calculate upper limit of for loop
ADD     $16   $16   $9
000000 10000 01001 10000 00000 100000
0x02098020?
loop1: 8 + 1 = 9 
loop2: 96 + 2 = 98
loop3: 984 + 3 = 987
loop4: 9872 + 4 = 9876 
loop5: 98760 + 5 = 98765














PC = 38
//store result
SW     $16    $4(0)  
101011 00100 10000 00000000 00000000
RtD[20:16] = 16       
0xAC900000
80 = 9

RtE == WriteRegE
Forward ALUoutM to write_dataE



PC = 3C
//increment store address
ADDI   $4    $4     #a0 += 4
001000 00100 00100 0000000000000100 
0x20840004





PC = 40
001000 01001 01001 0000000000000001
0x21290001
ADDI $9, $9, 1
loop1: 1 -> 2
loop2: 2 -> 3
RsD[25:21] = $9

PC = 44
ADD    $8,   $8,    $9
000000 01000 01001 01000 00000 100000
0x01094020
$8 = $8 + $9 = 10 + 1 = 11
RtD[20:16] = 9




PC = 48
//branch 
000101 01001 01011 1111111111110100
BNE    $9,   $11,   -12
0x152BFFF6
We want to jump to PC = 24
48 - 24 = 24 24/4 = 6
  
 




/* Original Code that works (init with addi instead of LW)*/
00100000
00001001
00000000
00000001

00100000
00001000
00000000
00000001

00100000
00001101
00000000
00000001

00100000
00001100
00000000
00001010

00100101
00101010
00000000
00000111

00100000
00001011
00000000
00001010

10001101
00110001 
00000000 
00000000






00100000
00000100 
00000000
01010000

00100000
00000000
00000000
00000000







00000001
01001000
00000000
00011000
00000000
00000000 
10000000
00010010


00000001
00001100 
00000000
00011000
00000000
00000000 
01000000
00010010




00000010
00001001 
10000000
00100000












10101100
10010000 
00000000 
00000000


00100000
10000100 
00000000
00000100 

00100001
00101001 
00000000
00000001

00000001
00001001 
01000000
00100000








00010101
00101011 
11111111
11110110


/* Load Word Version Backup*/
00100001
00110101 
00000000 
00000000

10001110
10101001 
00000000
00000000

10001110
10101000 
00000000
00000001

10001110
10101101 
00000000
00000010

10001110
10101100 
00000000
00000011

10001110
10101010 
00000000
00000100

10001110
10101011 
00000000
00000101









00100000
00000100 
00000000
01010000

00100000
00000000
00000000
00000000







00000001
01001000
00000000
00011000
00000000
00000000 
10000000
00010010


00000001
00001100 
00000000
00011000
00000000
00000000 
01000000
00010010




00000010
00001001 
10000000
00100000












10101100
10010000 
00000000 
00000000


00100000
10000100 
00000000
00000100 

00100001
00101001 
00000000
00000001

00000001
00001001 
01000000
00100000








00010101
00101011 
11111111
11110110







